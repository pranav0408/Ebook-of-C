	A storage class defines the scope (visibility) and life-time of variables and/or functions 
	within a C Program. They precede the type that they modify. We have four different storage 
	classes in a C program -

	=>auto
	=>register
	=>static
	=>extern

The auto Storage Class
	
  	The auto storage class is the default storage class for all local variables.

The register Storage Class
	
	The register storage class is used to define local variables that should 
	be stored in a register instead of RAM. This means that the variable has 
	a maximum size equal to the register size (usually one word) and can't 
	have the unary '&' operator applied to it (as it does not have a memory location).

The static Storage Class
	
	The static storage class instructs the compiler to keep a local variable in 
	existence during the life-time of the program instead of creating and destroying 
	it each time it comes into and goes out of scope. Therefore, making local variables 
	static allows them to maintain their values between function calls.

	The static modifier may also be applied to global variables. When this is done, 
	it causes that variable's scope to be restricted to the file in which it is declared.

	In C programming, when static is used on a global variable, it causes only one copy of 
	that member to be shared by all the objects of its class.

The extern Storage Class
	
	The extern storage class is used to give a reference of a global variable that is visible 
	to ALL the program files. When you use 'extern', the variable cannot be initialized however, 
	it points the variable name at a storage location that has been previously defined.

	When you have multiple files and you define a global variable or function, which will also 
	be used in other files, then extern will be used in another file to provide the reference of 
	defined variable or function. Just for understanding, extern is used to declare a global 
	variable or function in another file.

	The extern modifier is most commonly used when there are two or more files sharing the same 
	global variables or functions as explained below.