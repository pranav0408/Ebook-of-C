	Pointers in C are easy and fun to learn. Some C programming tasks are performed more easily 
	with pointers, and other tasks, such as dynamic memory allocation, cannot be performed without 
	using pointers. So it becomes necessary to learn pointers to become a perfect C programmer. 
	Let's start learning them in simple and easy steps.

	As you know, every variable is a memory location and every memory location has its address 
	defined which can be accessed using ampersand (&) operator, which denotes an address in memory. 
	Consider the following example, which prints the address of the variables defined -

Example-

#include <stdio.h>

int main () {

   int  var1;
   char var2[10];

   printf("Address of var1 variable: %x\n", &var1  );
   printf("Address of var2 variable: %x\n", &var2  );

   return 0;
}
	When the above code is compiled and executed, it produces the following result -

Address of var1 variable: bff5a400
Address of var2 variable: bff5a3f6

WHAT ARE POINTERS?

	A pointer is a variable whose value is the address of another variable, i.e., 
	direct address of the memory location. Like any variable or constant, you must declare a 
	pointer before using it to store any variable address. The general form of a pointer variable declaration is -

	type *var-name;
        
        The actual data type of the value of all pointers, whether integer, float, character, or otherwise, 
	is the same, a long hexadecimal number that represents a memory address. The only difference between 
	pointers of different data types is the data type of the variable or constant that the pointer points to.

Pointers in Detail

	Pointers have many but easy concepts and they are very important to C programming. The following 
	important pointer concepts should be clear to any C programmer -

	Sr.No.	Concept & Description
	1	Pointer arithmetic
		There are four arithmetic operators that can be used in pointers: ++, --, +, -

	2	Array of pointers
		You can define arrays to hold a number of pointers.

	3	Pointer to pointer
		C allows you to have pointer on a pointer and so on.

	4	Passing pointers to functions in C
		Passing an argument by reference or by address enable the passed argument to be changed 
		in the calling function by the called function.

	5	Return pointer from functions in C
		C allows a function to return a pointer to the local variable, static variable, 
		and dynamically allocated memory as well.