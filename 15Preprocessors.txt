	The C Preprocessor is not a part of the compiler, but is a separate step in the 
	compilation process. In simple terms, a C Preprocessor is just a text substitution 
	tool and it instructs the compiler to do required pre-processing before the actual 
	compilation. We'll refer to the C Preprocessor as CPP.

	All preprocessor commands begin with a hash symbol (#). It must be the first nonblank 
	character, and for readability, a preprocessor directive should begin in the first column. 
	The following section lists down all the important preprocessor directives -

	Sr.No.	Directive & Description
	1	#define
		Substitutes a preprocessor macro.

	2	#include
		Inserts a particular header from another file.

	3	#undef
		Undefines a preprocessor macro.

	4	#ifdef
		Returns true if this macro is defined.

	5	#ifndef
		Returns true if this macro is not defined.

	6	#if
		Tests if a compile time condition is true.

	7	#else
		The alternative for #if.

	8	#elif
		#else and #if in one statement.

	9	#endif
		Ends preprocessor conditional.

	10	#error
		Prints error message on stderr.

	11	#pragma
		Issues special commands to the compiler, using a standardized method.

Predefined Macros
	
	ANSI C defines a number of macros. Although each one is available for use in programming, 
	the predefined macros should not be directly modified.

	Sr.No.	Macro & Description
	1	__DATE__
		The current date as a character literal in "MMM DD YYYY" format.

	2	__TIME__
		The current time as a character literal in "HH:MM:SS" format.

	3	__FILE__
		This contains the current filename as a string literal.

	4	__LINE__
		This contains the current line number as a decimal constant.

	5	__STDC__
		Defined as 1 when the compiler complies with the ANSI standard.

  #include <stdio.h>

  main() {

   printf("File :%s\n", __FILE__ );
   printf("Date :%s\n", __DATE__ );
   printf("Time :%s\n", __TIME__ );
   printf("Line :%d\n", __LINE__ );
   printf("ANSI :%d\n", __STDC__ );

 }